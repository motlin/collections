<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
    "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!--
  ~ Copyright (c) 2022 Goldman Sachs and others.
  ~ All rights reserved. This program and the accompanying materials
  ~ are made available under the terms of the Eclipse Public License v1.0
  ~ and Eclipse Distribution License v. 1.0 which accompany this distribution.
  ~ The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
  ~ and the Eclipse Distribution License is available at
  ~ http://www.eclipse.org/org/documents/edl-v10.php.
  -->

<!-- Checkstyle is very configurable. Be sure to read the documentation at -->
<!-- http://checkstyle.sf.net (or in your downloaded distribution). -->

<!-- Most Checks are configurable, be sure to consult the documentation. -->

<!-- To completely disable a check, just comment it out or delete it from the file. -->

<module name="Checker">
    <module name="SuppressionFilter">
        <property name="file" value="checkstyle-suppressions.xml" />
    </module>

    <property name="charset" value="UTF-8" />

    <property name="severity" value="error" />

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile">
        <property name="fileExtensions" value="java, xml, stg, scala" />
    </module>

    <property name="fileExtensions" value="java, properties, xml, vm, g, g4, dtd" />

    <!-- BeforeExecutionFileFilters is required for sources that are based on java9 -->
    <module name="BeforeExecutionExclusionFileFilter">
        <property name="fileNamePattern" value="module\-info\.java$" />
    </module>

    <!-- Filters -->
    <!-- Tone down the checking for test code -->
    <module name="SuppressWarningsFilter" />
    <module name="SuppressWithPlainTextCommentFilter">
        <!--
          Use suppressions.xml for suppressions, this is only example.
          checkFormat will prevent suppression comments from being valid.
        -->
        <property name="checkFormat" value="IGNORETHIS" />
        <property name="offCommentFormat" value="CSOFF\: .*" />
        <property name="onCommentFormat" value="CSON\: .*" />
    </module>

    <!-- Regexp -->
    <module name="RegexpMultiline">
        <property name="id" value="regexpMultilineDefault" />
    </module>
    <module name="RegexpMultiline">
        <property name="id" value="noIndentationConfigExamples" />
        <property name="format" value="&lt;source&gt;\r?\n\s+" />
        <property name="fileExtensions" value="xml" />
        <property name="message" value="Content of source tag should not be Indented" />
    </module>
    <module name="RegexpMultiline">
        <property name="id" value="noConsecutiveLines" />
        <property name="format" value="\r?\n[\t ]*\r?\n[\t ]*\r?\n" />
        <property name="fileExtensions" value="java,xml,properties" />
        <property name="message" value="Unnecessary consecutive lines" />
    </module>
    <!--
    <module name="RegexpMultiline">
        <property name="id" value="commentFirstSentenceMultiline" />
        <property name="format" value="/\*\*\W+\* +\p{javaLowerCase}" />
        <property name="fileExtensions" value="java" />
        <property name="message"
            value="First sentence in a comment should start with a capital letter" />
    </module>
    -->
    <module name="RegexpMultiline">
        <property name="id" value="noEmptyFile" />
        <property name="format" value="^\s*$" />
        <property name="matchAcrossLines" value="true" />
        <property name="message" value="Empty file is not allowed" />
    </module>
    <module name="RegexpSingleline">
        <property name="id" value="noTrailingWhitespace" />
        <property name="format" value="\s+$" />
        <property name="minimum" value="0" />
        <property name="maximum" value="0" />
        <property name="message" value="Trailing whitespace is not allowed" />
    </module>
    <!-- This is needed for correct metadata generation -->
    <module name="RegexpSingleline">
        <property name="id" value="propertyTypeOnNewLine" />
        <property name="format" value="^ \* .+(Type|Default value|Validation type) is \{@code " />
        <property name="minimum" value="0" />
        <property name="maximum" value="0" />
        <property name="message" value="Property attribute should be on new javadoc line" />
    </module>
    <module name="RegexpSingleline">
        <property name="id" value="commentFirstSentenceSingleline" />
        <property name="format" value="/\*\* +\p{javaLowerCase}" />
        <property name="fileExtensions" value="java" />
        <property name="message"
            value="First sentence in a comment should start with a capital letter" />
    </module>
    <module name="RegexpSingleline">
        <property name="id" value="assertThatShouldBeOnSeparateLine" />
        <property name="format" value="assertWithMessage\(.*\).that\(" />
        <property name="fileExtensions" value="java" />
        <property name="message"
            value="Truth''s ''that'' method call should be on separate line" />
    </module>
    <!--
     Links to .dtd files should start with "/", "http://" or "https://",
     otherwise they will be broken after archiving the documentation.
     See https://github.com/checkstyle/checkstyle/issues/7340 for details.
    -->
    <module name="RegexpSingleline">
        <property name="id" value="noRelativeLinks" />
        <property name="format" value="href=&quot;(?!\/|https?:\/\/).*?\.dtd&quot;" />
        <property name="fileExtensions" value="xml, vm" />
        <property name="message"
            value="Relative links to DTD files are prohibited. Please use absolute path or uri instead." />
    </module>
    <module name="RegexpSingleline">
        <property name="id" value="noSourceforgeNetLinks" />
        <property name="format" value="checkstyle\.sourceforge\.net" />
        <property name="message"
            value="Old site links should not be used, please use https://checkstyle.org" />
    </module>
    <module name="RegexpSingleline">
        <property name="id" value="noSourceforgeIoLinks" />
        <property name="format" value="checkstyle\.sourceforge\.io" />
        <property name="message"
            value="Old site links should not be used, please use https://checkstyle.org" />
    </module>
    <module name="RegexpSingleline">
        <property name="id" value="noPackageCommentWithOtherVisibility" />
        <property name="format" value="/\*\s+package\s+\*/\s+(private|protected|public)" />
        <property name="fileExtensions" value="java" />
        <property name="message"
            value="Package comment marker should not be used if other visibility is defined" />
    </module>
    <module name="RegexpOnFilename">
        <property name="id" value="regexpOnFilenameWithSpace" />
    </module>
    <module name="RegexpOnFilename">
        <property name="id" value="javaFileLocation" />
        <property name="folderPattern" value="[\\/]src[\\/]\w+[\\/]java[\\/]" />
        <property name="fileNamePattern" value="\.java$" />
        <property name="match" value="false" />
        <message key="regexp.filepath.mismatch"
            value="Only java files should be located in the ''src/*/java'' folders." />
    </module>
    <module name="RegexpOnFilename">
        <property name="id" value="xmlFileLocation" />
        <property name="folderPattern" value="[\\/]src[\\/]xdocs[\\/]" />
        <property name="fileNamePattern" value="\.(xml)|(vm)$" />
        <property name="match" value="false" />
        <message key="regexp.filepath.mismatch"
            value="All files in the ''src/xdocs'' folder should have the ''xml'' or ''vm'' extension." />
    </module>
    <module name="RegexpOnFilename">
        <property name="id" value="testFileLocation" />
        <property name="folderPattern" value="[\\/]src[\\/]it[\\/]java[\\/]" />
        <property name="fileNamePattern" value="^((\w+Test)|(\w+TestSupport)|(Abstract\w+))\.java$" />
        <property name="match" value="false" />
        <message key="regexp.filepath.mismatch"
            value="All files in the ''src/it/java'' folder
                    should be named ''*Test.java'' or ''Abstract*.java''." />
    </module>

    <!--
        <module name="LineLength">
            <property name="fileExtensions" value="java"/>
            <property name="max" value="120"/>
            <property name="ignorePattern"
                value="^( *\* *([^ ]+|\{@code .*|&lt;a href=&quot;[^&quot;]+&quot;&gt;)|(package|import) .*)$"/>
        </module>
    -->

    <module name="TreeWalker">
        <property name="tabWidth" value="4" />

        <module name="RequireThis" />

        <module name="OuterTypeFilename" />
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL" />
            <property name="format"
                value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)" />
            <property name="message"
                value="Consider using special escape sequence instead of octal value or Unicode escaped value." />
        </module>
        <module name="MissingSwitchDefault" />

        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->

        <module name="RecordComponentName" />
        <module name="ConstantName" />
        <module name="LocalFinalVariableName" />
        <module name="LocalVariableName">
            <property name="allowOneCharVarInForLoop" value="true" />
        </module>
        <module name="MemberName" />
        <module name="MethodName">
            <property name="format" value="^[a-z][a-zA-Z0-9_]*$" />
        </module>
        <module name="ClassTypeParameterName">
            <property name="format" value="^[A-Z0-9]+$" />
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="^[A-Z0-9]+$" />
        </module>
        <module name="RecordTypeParameterName">
            <property name="format" value="^[A-Z0-9]+$" />
        </module>
        <module name="InterfaceTypeParameterName">
            <property name="format" value="^[A-Z0-9]+$" />
        </module>

        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
        </module>

        <module name="ParameterName" />
        <module name="StaticVariableName" />
        <module name="TypeName" />
        <module name="LambdaParameterName" />
        <module name="PatternVariableName" />
        <module name="IllegalIdentifierName" />

        <module name="AvoidStarImport">
            <property name="allowStaticMemberImports" value="true" />
        </module>

        <module name="IllegalImport" />
        <module name="RedundantImport" />

        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForInitializerPad" />
        <module name="EmptyForIteratorPad">
            <property name="option" value="space" />
        </module>
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true" />
            <property name="allowMultipleEmptyLinesInsideClassMembers" value="false" />
        </module>
        <module name="GenericWhitespace" />
        <module name="MethodParamPad" />
        <module name="NoLineWrap" />
        <module name="NoWhitespaceBeforeCaseDefaultColon" />
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="ARRAY_INIT" />
            <property name="tokens" value="AT" />
            <property name="tokens" value="BNOT" />
            <property name="tokens" value="DEC" />
            <property name="tokens" value="DOT" />
            <property name="tokens" value="INC" />
            <property name="tokens" value="LNOT" />
            <property name="tokens" value="UNARY_MINUS" />
            <property name="tokens" value="UNARY_PLUS" />
            <property name="tokens" value="ARRAY_DECLARATOR" />
            <property name="tokens" value="INDEX_OP" />
            <property name="tokens" value="METHOD_REF" />
        </module>

        <module name="NoWhitespaceBefore" />
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="DOT" />
            <property name="tokens" value="METHOD_REF" />
            <property name="allowLineBreaks" value="true" />
        </module>

        <module name="OperatorWrap">
            <property name="tokens" value="QUESTION" />
            <property name="tokens" value="COLON" />
            <property name="tokens" value="EQUAL" />
            <property name="tokens" value="NOT_EQUAL" />
            <property name="tokens" value="DIV" />
            <property name="tokens" value="PLUS" />
            <property name="tokens" value="MINUS" />
            <property name="tokens" value="STAR" />
            <property name="tokens" value="MOD" />
            <property name="tokens" value="SR" />
            <property name="tokens" value="BSR" />
            <property name="tokens" value="GE" />
            <property name="tokens" value="GT" />
            <property name="tokens" value="SL" />
            <property name="tokens" value="LE" />
            <property name="tokens" value="LT" />
            <property name="tokens" value="BXOR" />
            <property name="tokens" value="BOR" />
            <property name="tokens" value="LOR" />
            <property name="tokens" value="BAND" />
            <property name="tokens" value="LAND" />
            <property name="tokens" value="TYPE_EXTENSION_AND" />
            <property name="tokens" value="LITERAL_INSTANCEOF" />
            <property name="tokens" value="METHOD_REF" />
            <property name="option" value="nl" />
        </module>

        <module name="OperatorWrap">
            <property name="tokens" value="ASSIGN" />
            <property name="tokens" value="DIV_ASSIGN" />
            <property name="tokens" value="PLUS_ASSIGN" />
            <property name="tokens" value="MINUS_ASSIGN" />
            <property name="tokens" value="STAR_ASSIGN" />
            <property name="tokens" value="MOD_ASSIGN" />
            <property name="tokens" value="SR_ASSIGN" />
            <property name="tokens" value="BSR_ASSIGN" />
            <property name="tokens" value="SL_ASSIGN" />
            <property name="tokens" value="BXOR_ASSIGN" />
            <property name="tokens" value="BOR_ASSIGN" />
            <property name="tokens" value="BAND_ASSIGN" />
            <property name="option" value="eol" />
        </module>

        <module name="ParenPad" />
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapNl" />
            <property name="tokens" value="DOT" />
            <property name="tokens" value="AT" />
            <property name="tokens" value="METHOD_REF" />
            <property name="option" value="nl" />
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapEol" />
            <property name="tokens" value="COMMA" />
            <property name="tokens" value="RPAREN" />
            <property name="tokens" value="RBRACK" />
            <property name="tokens" value="ARRAY_DECLARATOR" />
            <property name="tokens" value="ELLIPSIS" />
            <property name="tokens" value="SEMI" />
            <property name="option" value="EOL" />
        </module>
        <module name="TypecastParenPad" />

        <module name="WhitespaceAfter" />

        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true" />
            <property name="allowEmptyMethods" value="true" />
            <property name="allowEmptyTypes" value="true" />
            <property name="allowEmptyLoops" value="true" />
        </module>

        <module name="Indentation">
            <property name="lineWrappingIndentation" value="8" />
        </module>
        <module name="CommentsIndentation" />

        <module name="SingleSpaceSeparator">
            <property name="validateComments" value="false" />
        </module>

        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder" />
        <module name="RedundantModifier" />

        <module name="LeftCurly">
            <property name="option" value="nl" />
            <!--TODO: Remove this, to include the LAMBDA token-->
            <property name="tokens" value="INTERFACE_DEF" />
            <property name="tokens" value="CLASS_DEF" />
            <property name="tokens" value="ANNOTATION_DEF" />
            <property name="tokens" value="ENUM_DEF" />
            <property name="tokens" value="CTOR_DEF" />
            <property name="tokens" value="METHOD_DEF" />
            <property name="tokens" value="ENUM_CONSTANT_DEF" />
            <property name="tokens" value="LITERAL_WHILE" />
            <property name="tokens" value="LITERAL_TRY" />
            <property name="tokens" value="LITERAL_CATCH" />
            <property name="tokens" value="LITERAL_FINALLY" />
            <property name="tokens" value="LITERAL_SYNCHRONIZED" />
            <property name="tokens" value="LITERAL_SWITCH" />
            <property name="tokens" value="LITERAL_DO" />
            <property name="tokens" value="LITERAL_IF" />
            <property name="tokens" value="LITERAL_ELSE" />
            <property name="tokens" value="LITERAL_FOR" />
            <property name="tokens" value="STATIC_INIT" />
            <property name="tokens" value="OBJBLOCK" />
        </module>

        <!--
                <module name="LeftCurly">
                    <property name="option" value="eol"/>
                    <property name="tokens" value="LAMBDA"/>
                </module>
        -->

        <module name="NeedBraces" />

        <module name="RightCurly">
            <property name="tokens" value="METHOD_DEF" />
            <property name="tokens" value="CTOR_DEF" />
            <property name="tokens" value="CLASS_DEF" />
            <property name="tokens" value="INSTANCE_INIT" />
            <property name="tokens" value="LITERAL_FOR" />
            <property name="tokens" value="STATIC_INIT" />
            <property name="tokens" value="LITERAL_WHILE" />
            <property name="tokens" value="LITERAL_CATCH" />
            <property name="tokens" value="LITERAL_ELSE" />
            <property name="tokens" value="LITERAL_FINALLY" />
            <property name="tokens" value="LITERAL_IF" />
            <property name="tokens" value="LITERAL_TRY" />
            <property name="tokens" value="LITERAL_DO" />
            <property name="tokens" value="ANNOTATION_DEF" />
            <property name="tokens" value="ENUM_DEF" />
            <property name="tokens" value="RECORD_DEF" />
            <property name="tokens" value="COMPACT_CTOR_DEF" />
            <property name="option" value="alone" />
        </module>
        <module name="RightCurly">
            <property name="tokens" value="INTERFACE_DEF" />
            <property name="option" value="alone_or_singleline" />
        </module>

        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <module name="EmptyStatement" />
        <module name="EmptyBlock">
            <property name="tokens" value="LITERAL_CATCH" />
            <property name="tokens" value="ARRAY_INIT" />
            <property name="tokens" value="LITERAL_DEFAULT" />
            <property name="tokens" value="LITERAL_CASE" />
            <property name="tokens" value="INSTANCE_INIT" />
            <property name="tokens" value="LITERAL_DO" />
            <property name="tokens" value="LITERAL_ELSE" />
            <property name="tokens" value="LITERAL_FINALLY" />
            <property name="tokens" value="LITERAL_FOR" />
            <property name="tokens" value="LITERAL_IF" />
            <property name="tokens" value="LITERAL_SWITCH" />
            <property name="tokens" value="LITERAL_SYNCHRONIZED" />
            <property name="tokens" value="LITERAL_TRY" />
            <property name="tokens" value="LITERAL_WHILE" />
            <property name="tokens" value="STATIC_INIT" />
            <property name="option" value="text" />
        </module>

        <!-- Effective Java Item 8 - Always override hashCode when you override equals -->
        <module name="EqualsHashCode" />

        <module name="HiddenField">
            <property name="ignoreConstructorParameter" value="true" />
            <property name="ignoreSetter" value="true" />
            <property name="setterCanReturnItsClass" value="true" />
            <property name="severity" value="warning" />
        </module>

        <!-- Effective Java Item 4 - Avoid creating duplicate objects -->
        <module name="IllegalInstantiation">
            <property name="severity" value="warning" />
            <property name="classes" value="java.lang.Boolean" />
            <property name="classes" value="java.lang.Byte" />
            <property name="classes" value="java.lang.Character" />
            <property name="classes" value="java.lang.Integer" />
            <property name="classes" value="java.lang.Long" />
            <property name="classes" value="java.lang.Short" />
            <property name="classes" value="java.lang.StringBuffer" />
            <property name="classes" value="java.lang.String" />
            <property name="classes" value="java.util.Timer" />
            <property name="classes" value="java.util.TimerTask" />
        </module>

        <module name="SimplifyBooleanExpression" />

        <module name="SimplifyBooleanReturn" />

        <module name="FinalClass" />

        <module name="HideUtilityClassConstructor" />

        <!-- Effective Java Item 17 - Use interfaces only to define types -->
        <module name="InterfaceIsType">
            <property name="severity" value="warning" />
        </module>

        <module name="ArrayTrailingComma" />

        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle" />

        <module name="Regexp">
            <property name="illegalPattern" value="true" />
            <property name="format" value="[’“”]" />
            <property name="message" value="Curly quotes aren't allowed." />
        </module>

        <module name="Regexp">
            <property name="illegalPattern" value="true" />
            <property name="format" value="[ ]+$" />
            <property name="message" value="Line has trailing spaces." />
        </module>

        <module name="RegexpSinglelineJava">
            <property name="ignoreComments" value="true" />

            <property
                name="format"
                value="System\.out\.println" />

            <property
                name="message"
                value="System.out.println." />
        </module>

        <module name="RegexpSinglelineJava">
            <property name="ignoreComments" value="true" />

            <property
                name="format"
                value="System\.err\.println" />

            <property
                name="message"
                value="System.err.println." />
        </module>

        <module name="RegexpSinglelineJava">
            <property name="ignoreComments" value="true" />

            <property
                name="format"
                value=", \w+,\n" />

            <property
                name="message"
                value="Comma separated list should have one item per line, or be all on a single line." />
        </module>

        <module name="RegexpSinglelineJava">
            <property name="ignoreComments" value="true" />

            <property
                name="format"
                value="\(\w+,\n" />

            <property
                name="message"
                value="Comma separated list should have one item per line, or be all on a single line." />
        </module>

        <!-- Effective Java Item 6 - Avoid finalizers -->
        <module name="NoFinalizer" />

        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationMostCases" />
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF" />
        </module>
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationVariables" />
            <property name="tokens" value="VARIABLE_DEF" />
            <property name="allowSamelineMultipleAnnotations" value="true" />
        </module>
        <module name="AnnotationLocation">
            <property name="tokens" value="ANNOTATION_DEF" />
            <property name="tokens" value="ANNOTATION_FIELD_DEF" />
            <property name="tokens" value="PACKAGE_DEF" />
            <property name="tokens" value="ENUM_CONSTANT_DEF" />
            <property name="tokens" value="VARIABLE_DEF" />
            <property name="allowSamelineSingleParameterlessAnnotation" value="false" />
        </module>
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="ignored" />
        </module>

        <module name="IllegalThrows" />

        <module name="UpperEll" />

        <module name="SuperFinalize" />

        <module name="SuperClone">
            <property name="severity" value="warning" />
        </module>


        <module name="CovariantEquals" />

        <module name="AvoidStaticImport">
            <property name="excludes"
                value="org.junit.Assert.*,org.junit.Assume.*,org.hamcrest.CoreMatchers.*,org.hamcrest.Matchers.*,org.hamcrest.MatcherAssert.*,org.eclipse.collections.impl.test.Verify.*,org.eclipse.collections.impl.factory.Iterables.*,org.eclipse.collections.test.IterableTestCase.*" />
        </module>

        <module name="MissingDeprecated" />

        <module name="AnnotationUseStyle" />

        <module name="DeclarationOrder" />

        <module name="DefaultComesLast" />

        <module name="FallThrough" />

        <module name="ImportOrder">
            <property name="groups" value="java,javax" />
            <property name="separated" value="true" />
            <property name="sortStaticImportsAlphabetically" value="true" />
            <property name="option" value="bottom" />
        </module>

        <module name="MultipleVariableDeclarations" />

        <module name="MutableException" />

        <module name="PackageDeclaration" />

        <module name="MissingOverride" />

        <module name="OneTopLevelClass" />

        <module name="UnusedImports">
            <property name="processJavadoc" value="true" />
        </module>
        <module name="UnusedLocalVariable" />

        <module name="OneStatementPerLine" />

        <!--Suppressing this check as in newer version of checkstyle parenthesis around expressions are getting triggered-->
        <!--<module name="UnnecessaryParentheses" />-->

        <!-- Annotations -->
        <module name="AnnotationUseStyle" />
        <module name="PackageAnnotation" />

        <!-- Class Design -->
        <!--
                <module name="InnerTypeLast"/>
        -->

        <!-- Coding -->
        <module name="ArrayTrailingComma" />
        <module name="AvoidDoubleBraceInitialization" />
        <module name="AvoidNoArgumentSuperConstructorCall" />
        <module name="EqualsAvoidNull" />
        <!--<module name="ExplicitInitialization" />-->
        <module name="IllegalCatch">
            <property name="illegalClassNames"
                value="java.lang.NullPointerException" />
        </module>
        <!--
        <module name="IllegalType">
            <property name="illegalClassNames"
                value="java.util.HashSet, HashSet, java.util.LinkedHashMap, LinkedHashMap,
                       java.util.TreeMap, TreeMap, java.util.HashMap, HashMap,
                       java.util.LinkedHashSet, LinkedHashSet, java.util.TreeSet, TreeSet,
                       java.lang.StringBuffer, StringBuffer" />
        </module>
        -->
        <module name="MatchXpath">
            <property name="query" value="//CLASS_DEF[@text!='Checker' and @text!='Main']
      //LITERAL_CATCH//METHOD_CALL[.//IDENT[@text = 'printStackTrace']]/.." />
            <message key="matchxpath.match" value="Avoid using 'printStackTrace'." />
        </module>
<!--
        <module name="MatchXpath">
            <property name="query" value="//METHOD_DEF/MODIFIERS//
            ANNOTATION[./IDENT[@text='Test']]/ANNOTATION_MEMBER_VALUE_PAIR
            [./IDENT[@text='expected']]" />
            <message key="matchxpath.match" value="Avoid using 'expected' attribute in Test annotation." />
        </module>
-->
        <!--
        <module name="MatchXpath">
            <property name="id" value="singleLineCommentStartWithSpace" />
            <property name="query"
                value="//SINGLE_LINE_COMMENT[./COMMENT_CONTENT[not(starts-with(@text, ' '))
                       and not(@text = '\n') and not(ends-with(@text, '//\n'))
                       and not(@text = '\r') and not(ends-with(@text, '//\r'))
                       and not(@text = '\r\n') and not(ends-with(@text, '//\r\n'))]]" />
            <message key="matchxpath.match" value="Single line comment text should start with space." />
        </module>
        -->
        <module name="MatchXpath">
            <property name="id" value="blockCommentStartWithSpace" />
            <property name="query"
                value="//BLOCK_COMMENT_BEGIN[./COMMENT_CONTENT[matches(@text, '\\n+ *\*[^\\n ]\S')
                       or matches(@text, '^[^\* \\n]') or matches(@text, '\\r+ *\*[^\\r ]\S')
                       or matches(@text, '^[^\* \\r]') or matches(@text, '\\r\\n+ *\*[^\\r\\n ]\S')
                       or matches(@text, '^[^\* \\r\\n]') and not(starts-with(@text, '*'))]]" />
            <message key="matchxpath.match"
                value="Block comment text should start with space after asterisk." />
        </module>
        <module name="NestedTryDepth" />
        <module name="NoCodeInFile" />
        <!--        <module name="OverloadMethodsDeclarationOrder"/>-->
        <module name="StringLiteralEquality" />
        <module name="UnnecessarySemicolonAfterOuterTypeDeclaration" />
        <module name="UnnecessarySemicolonAfterTypeMemberDeclaration" />
        <module name="UnnecessarySemicolonInEnumeration" />
        <module name="UnnecessarySemicolonInTryWithResources" />
        <module name="UnusedLocalVariable" />

        <!-- Filters -->
        <module name="SuppressionCommentFilter">
            <!--
              Use suppressions.xml for suppressions, this is only example.
              checkFormat will prevent suppression comments from being valid.
            -->
            <property name="checkFormat" value="IGNORETHIS" />
            <property name="offCommentFormat" value="CSOFF\: .*" />
            <property name="onCommentFormat" value="CSON\: .*" />
        </module>
        <!-- Tone down the checking for test code -->
        <module name="SuppressionXpathSingleFilter">
            <property name="files" value=".*[\\/]src[\\/]test[\\/]" />
            <property name="checks" value="MagicNumber" />
        </module>
        <module name="SuppressionXpathSingleFilter">
            <property name="files" value=".*[\\/]src[\\/]test[\\/]" />
            <property name="checks" value="MethodCount" />
        </module>
        <!-- Fixing these cases will decrease code readability -->
        <module name="SuppressionXpathSingleFilter">
            <property name="files" value=".*[\\/]src[\\/]test[\\/]" />
            <property name="checks" value="MultipleStringLiterals" />
        </module>
        <module name="SuppressWithNearbyCommentFilter">
            <property name="commentFormat"
                value="-@cs\[(\w{8,}(\|\w{8,})*)\] \w[\(\)\-\.\'\`\,\:\;\w ]{10,}" />
            <property name="checkFormat" value="$1" />
            <property name="influenceFormat" value="3" />
        </module>

        <!-- Misc -->
        <module name="DescendantToken" />
        <!--<module name="TrailingComment" />-->

        <!-- Regexp -->
        <module name="Regexp">
            <property name="id" value="regexpDefault" />
        </module>
        <module name="RegexpSinglelineJava">
            <property name="id" value="regexpSingleLineDefault" />
        </module>
        <module name="RegexpSinglelineJava">
            <property name="id" value="checkASCII" />
            <property name="format" value="[^\p{ASCII}]" />
            <property name="ignoreComments" value="true" />
        </module>

        <!-- Whitespace -->
        <module name="SingleSpaceSeparator">
            <property name="validateComments" value="false" />
        </module>
    </module>

    <module name="RegexpHeader">
        <property name="headerFile" value="java.header" />
        <property name="multiLines" value="11, 12, 13, 15, 16" />
        <property name="fileExtensions" value="java, scala" />
    </module>

    <module name="FileTabCharacter">
        <property name="eachLine" value="false" />
    </module>

    <module name="RegexpMultiline">
        <property name="format" value="\{\n\n" />
        <property name="message" value="First line after opening a scope may not be blank." />
    </module>

    <module name="RegexpMultiline">
        <property name="format" value="\n\n[ ]*\}" />
        <property name="message" value="Last line before closing a scope may not be blank." />
    </module>

    <module name="RegexpMultiline">
        <property name="format" value="\n\n\n" />
        <property name="message" value="Extra newline." />
    </module>
</module>
